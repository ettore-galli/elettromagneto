import pytest

from elettromagneto.base.space_2d import (
    Space2D,
    ScalarValue,
    ScalarSource,
    ScalarField,
    VectorValue2D,
)


def test_point_coordinate():
    assert Space2D.point_coordinate(-3, 7, 5, 9) == 3.25


def test_create_grid():
    assert Space2D.create_grid(-5, 5, -5, 5, 10, 10) == [
        [
            (-5.0, -5.0),
            (-3.888888888888889, -5.0),
            (-2.7777777777777777, -5.0),
            (-1.6666666666666665, -5.0),
            (-0.5555555555555554, -5.0),
            (0.5555555555555554, -5.0),
            (1.666666666666667, -5.0),
            (2.7777777777777777, -5.0),
            (3.8888888888888893, -5.0),
            (5.0, -5.0),
        ],
        [
            (-5.0, -3.888888888888889),
            (-3.888888888888889, -3.888888888888889),
            (-2.7777777777777777, -3.888888888888889),
            (-1.6666666666666665, -3.888888888888889),
            (-0.5555555555555554, -3.888888888888889),
            (0.5555555555555554, -3.888888888888889),
            (1.666666666666667, -3.888888888888889),
            (2.7777777777777777, -3.888888888888889),
            (3.8888888888888893, -3.888888888888889),
            (5.0, -3.888888888888889),
        ],
        [
            (-5.0, -2.7777777777777777),
            (-3.888888888888889, -2.7777777777777777),
            (-2.7777777777777777, -2.7777777777777777),
            (-1.6666666666666665, -2.7777777777777777),
            (-0.5555555555555554, -2.7777777777777777),
            (0.5555555555555554, -2.7777777777777777),
            (1.666666666666667, -2.7777777777777777),
            (2.7777777777777777, -2.7777777777777777),
            (3.8888888888888893, -2.7777777777777777),
            (5.0, -2.7777777777777777),
        ],
        [
            (-5.0, -1.6666666666666665),
            (-3.888888888888889, -1.6666666666666665),
            (-2.7777777777777777, -1.6666666666666665),
            (-1.6666666666666665, -1.6666666666666665),
            (-0.5555555555555554, -1.6666666666666665),
            (0.5555555555555554, -1.6666666666666665),
            (1.666666666666667, -1.6666666666666665),
            (2.7777777777777777, -1.6666666666666665),
            (3.8888888888888893, -1.6666666666666665),
            (5.0, -1.6666666666666665),
        ],
        [
            (-5.0, -0.5555555555555554),
            (-3.888888888888889, -0.5555555555555554),
            (-2.7777777777777777, -0.5555555555555554),
            (-1.6666666666666665, -0.5555555555555554),
            (-0.5555555555555554, -0.5555555555555554),
            (0.5555555555555554, -0.5555555555555554),
            (1.666666666666667, -0.5555555555555554),
            (2.7777777777777777, -0.5555555555555554),
            (3.8888888888888893, -0.5555555555555554),
            (5.0, -0.5555555555555554),
        ],
        [
            (-5.0, 0.5555555555555554),
            (-3.888888888888889, 0.5555555555555554),
            (-2.7777777777777777, 0.5555555555555554),
            (-1.6666666666666665, 0.5555555555555554),
            (-0.5555555555555554, 0.5555555555555554),
            (0.5555555555555554, 0.5555555555555554),
            (1.666666666666667, 0.5555555555555554),
            (2.7777777777777777, 0.5555555555555554),
            (3.8888888888888893, 0.5555555555555554),
            (5.0, 0.5555555555555554),
        ],
        [
            (-5.0, 1.666666666666667),
            (-3.888888888888889, 1.666666666666667),
            (-2.7777777777777777, 1.666666666666667),
            (-1.6666666666666665, 1.666666666666667),
            (-0.5555555555555554, 1.666666666666667),
            (0.5555555555555554, 1.666666666666667),
            (1.666666666666667, 1.666666666666667),
            (2.7777777777777777, 1.666666666666667),
            (3.8888888888888893, 1.666666666666667),
            (5.0, 1.666666666666667),
        ],
        [
            (-5.0, 2.7777777777777777),
            (-3.888888888888889, 2.7777777777777777),
            (-2.7777777777777777, 2.7777777777777777),
            (-1.6666666666666665, 2.7777777777777777),
            (-0.5555555555555554, 2.7777777777777777),
            (0.5555555555555554, 2.7777777777777777),
            (1.666666666666667, 2.7777777777777777),
            (2.7777777777777777, 2.7777777777777777),
            (3.8888888888888893, 2.7777777777777777),
            (5.0, 2.7777777777777777),
        ],
        [
            (-5.0, 3.8888888888888893),
            (-3.888888888888889, 3.8888888888888893),
            (-2.7777777777777777, 3.8888888888888893),
            (-1.6666666666666665, 3.8888888888888893),
            (-0.5555555555555554, 3.8888888888888893),
            (0.5555555555555554, 3.8888888888888893),
            (1.666666666666667, 3.8888888888888893),
            (2.7777777777777777, 3.8888888888888893),
            (3.8888888888888893, 3.8888888888888893),
            (5.0, 3.8888888888888893),
        ],
        [
            (-5.0, 5.0),
            (-3.888888888888889, 5.0),
            (-2.7777777777777777, 5.0),
            (-1.6666666666666665, 5.0),
            (-0.5555555555555554, 5.0),
            (0.5555555555555554, 5.0),
            (1.666666666666667, 5.0),
            (2.7777777777777777, 5.0),
            (3.8888888888888893, 5.0),
            (5.0, 5.0),
        ],
    ]


def test_distance():
    assert Space2D.distance((7, 3), (5, 4)) == 2.23606797749979


def test_projection():
    assert Space2D.projection(5, (7, 3), (5, 4)) == [
        -4.47213595499958,
        2.23606797749979,
    ]


def test_sum_vectors():
    assert Space2D.sum_vectors((2, 3), (100, 1000)) == [102, 1003]


def test_set_get_scalar_value():
    space = Space2D(100, 100, -1, 1, -1, 1)
    space.set_scalar_value((-3, 4), ScalarValue(value=999))
    assert space.get_scalar_value((-3, 4)) == ScalarValue(value=999)
    assert space.get_scalar_value((-3, 5), ScalarValue(value=888)) == ScalarValue(
        value=888
    )


def test_set_get_vector_value():
    space = Space2D(100, 100, -1, 1, -1, 1)
    space.set_vector_value((-3, 4), VectorValue2D(value=(111, 222)))
    assert space.get_vector_value((-3, 4)) == VectorValue2D(value=(111, 222))
    assert space.get_vector_value(
        (-3, 5), VectorValue2D(value=(555, 666))
    ) == VectorValue2D(value=(555, 666))


def test_add_get_scalar_sources():
    space = Space2D(100, 100, -1, 1, -1, 1)
    space.add_scalar_source(ScalarSource(point=(2, 3), value=100))
    space.add_scalar_source(ScalarSource(point=(6, 7), value=999))
    assert space.get_all_sources() == [
        ScalarSource(point=(2, 3), value=100),
        ScalarSource(point=(6, 7), value=999),
    ]


def test_set_get_scalar_field():
    space = Space2D(3, 3, -1, 1, -1, 1)
    space.set_scalar_value((0, 0), ScalarValue(value=999))
    space.set_scalar_value((1, 1), ScalarValue(value=888))
    assert space.get_scalar_field() == ScalarField(
        min_value=ScalarValue(value=0),
        max_value=ScalarValue(value=999),
        values=[
            [ScalarValue(value=0), ScalarValue(value=0), ScalarValue(value=0)],
            [ScalarValue(value=0), ScalarValue(value=999), ScalarValue(value=0)],
            [ScalarValue(value=0), ScalarValue(value=0), ScalarValue(value=888)],
        ],
    )


@pytest.mark.parametrize(
    "rough, nice",
    [
        (-3, -2.0986122886681098),
        (-1, -1),
        (-0.5, -0.5),
        (0.5, 0.5),
        (1, 1),
        (3, 2.0986122886681098),
    ],
)
def test_nice_value(rough, nice):
    assert Space2D.nice_value(rough) == nice
