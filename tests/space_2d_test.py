from elettromagneto.space_2d import Space2DBase


def test_point_coordinate():
    assert Space2DBase.point_coordinate(-3, 7, 5, 9) == 3.25


def test_create_grid():
    assert Space2DBase.create_grid(-5, 5, -5, 5, 10, 10) == [
        [
            (-5.0, -5.0),
            (-3.888888888888889, -5.0),
            (-2.7777777777777777, -5.0),
            (-1.6666666666666665, -5.0),
            (-0.5555555555555554, -5.0),
            (0.5555555555555554, -5.0),
            (1.666666666666667, -5.0),
            (2.7777777777777777, -5.0),
            (3.8888888888888893, -5.0),
            (5.0, -5.0),
        ],
        [
            (-5.0, -3.888888888888889),
            (-3.888888888888889, -3.888888888888889),
            (-2.7777777777777777, -3.888888888888889),
            (-1.6666666666666665, -3.888888888888889),
            (-0.5555555555555554, -3.888888888888889),
            (0.5555555555555554, -3.888888888888889),
            (1.666666666666667, -3.888888888888889),
            (2.7777777777777777, -3.888888888888889),
            (3.8888888888888893, -3.888888888888889),
            (5.0, -3.888888888888889),
        ],
        [
            (-5.0, -2.7777777777777777),
            (-3.888888888888889, -2.7777777777777777),
            (-2.7777777777777777, -2.7777777777777777),
            (-1.6666666666666665, -2.7777777777777777),
            (-0.5555555555555554, -2.7777777777777777),
            (0.5555555555555554, -2.7777777777777777),
            (1.666666666666667, -2.7777777777777777),
            (2.7777777777777777, -2.7777777777777777),
            (3.8888888888888893, -2.7777777777777777),
            (5.0, -2.7777777777777777),
        ],
        [
            (-5.0, -1.6666666666666665),
            (-3.888888888888889, -1.6666666666666665),
            (-2.7777777777777777, -1.6666666666666665),
            (-1.6666666666666665, -1.6666666666666665),
            (-0.5555555555555554, -1.6666666666666665),
            (0.5555555555555554, -1.6666666666666665),
            (1.666666666666667, -1.6666666666666665),
            (2.7777777777777777, -1.6666666666666665),
            (3.8888888888888893, -1.6666666666666665),
            (5.0, -1.6666666666666665),
        ],
        [
            (-5.0, -0.5555555555555554),
            (-3.888888888888889, -0.5555555555555554),
            (-2.7777777777777777, -0.5555555555555554),
            (-1.6666666666666665, -0.5555555555555554),
            (-0.5555555555555554, -0.5555555555555554),
            (0.5555555555555554, -0.5555555555555554),
            (1.666666666666667, -0.5555555555555554),
            (2.7777777777777777, -0.5555555555555554),
            (3.8888888888888893, -0.5555555555555554),
            (5.0, -0.5555555555555554),
        ],
        [
            (-5.0, 0.5555555555555554),
            (-3.888888888888889, 0.5555555555555554),
            (-2.7777777777777777, 0.5555555555555554),
            (-1.6666666666666665, 0.5555555555555554),
            (-0.5555555555555554, 0.5555555555555554),
            (0.5555555555555554, 0.5555555555555554),
            (1.666666666666667, 0.5555555555555554),
            (2.7777777777777777, 0.5555555555555554),
            (3.8888888888888893, 0.5555555555555554),
            (5.0, 0.5555555555555554),
        ],
        [
            (-5.0, 1.666666666666667),
            (-3.888888888888889, 1.666666666666667),
            (-2.7777777777777777, 1.666666666666667),
            (-1.6666666666666665, 1.666666666666667),
            (-0.5555555555555554, 1.666666666666667),
            (0.5555555555555554, 1.666666666666667),
            (1.666666666666667, 1.666666666666667),
            (2.7777777777777777, 1.666666666666667),
            (3.8888888888888893, 1.666666666666667),
            (5.0, 1.666666666666667),
        ],
        [
            (-5.0, 2.7777777777777777),
            (-3.888888888888889, 2.7777777777777777),
            (-2.7777777777777777, 2.7777777777777777),
            (-1.6666666666666665, 2.7777777777777777),
            (-0.5555555555555554, 2.7777777777777777),
            (0.5555555555555554, 2.7777777777777777),
            (1.666666666666667, 2.7777777777777777),
            (2.7777777777777777, 2.7777777777777777),
            (3.8888888888888893, 2.7777777777777777),
            (5.0, 2.7777777777777777),
        ],
        [
            (-5.0, 3.8888888888888893),
            (-3.888888888888889, 3.8888888888888893),
            (-2.7777777777777777, 3.8888888888888893),
            (-1.6666666666666665, 3.8888888888888893),
            (-0.5555555555555554, 3.8888888888888893),
            (0.5555555555555554, 3.8888888888888893),
            (1.666666666666667, 3.8888888888888893),
            (2.7777777777777777, 3.8888888888888893),
            (3.8888888888888893, 3.8888888888888893),
            (5.0, 3.8888888888888893),
        ],
        [
            (-5.0, 5.0),
            (-3.888888888888889, 5.0),
            (-2.7777777777777777, 5.0),
            (-1.6666666666666665, 5.0),
            (-0.5555555555555554, 5.0),
            (0.5555555555555554, 5.0),
            (1.666666666666667, 5.0),
            (2.7777777777777777, 5.0),
            (3.8888888888888893, 5.0),
            (5.0, 5.0),
        ],
    ]


def test_radius():
    assert Space2DBase.radius((7, 3), (5, 4)) == 2.23606797749979


def test_set_get_value():
    space = Space2DBase(100, 100, -1, 1, -1, 1)
    space.set_value((-3, 4), 999)
    assert space.get_value((-3, 4)) == 999
    assert space.get_value((-3, 5), 888) == 888
